import { promises as fs } from "fs";
import { LcovParser } from "./lcov";
import { CoverageAnalyzer } from "./coverageAnalyzer";
import { ChangesetUtils } from "./changeset";

describe("Integration Tests", () => {
  it("should work with real V8 generated LCOV data", async () => {
    // Use the real coverage file generated by our tests
    const lcovPath = "coverage/lcov.info";

    await fs.access(lcovPath);
    const report = await LcovParser.parseFile(lcovPath);
    expect(report.files.size).toBeGreaterThan(0);

    // Check that we have actual function names (not anonymous)
    const files = Array.from(report.files.values());
    const functionsWithNames = files.flatMap((file) =>
      file.functions.filter(
        (func) =>
          func.name &&
          !func.name.includes("anonymous") &&
          !func.name.includes("("),
      ),
    );

    expect(functionsWithNames.length).toBeGreaterThan(0);

    // Test with some realistic changeset
    const changeset = ChangesetUtils.createChangeset(
      ["src/changeset.ts", "src/lcov.ts"],
      "def456",
      "abc123",
      "main",
    );

    const analysis = CoverageAnalyzer.analyze(changeset, report);

    expect(analysis.summary.overallCoverage.totalLines).toBeGreaterThan(0);
    expect(analysis.summary.overallCoverage.coveredLines).toBeGreaterThan(0);
    expect(analysis.summary.overallCoverage.totalFunctions).toBeGreaterThan(0);
  });
});
